package org.rs2server.rs2.clipping;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.GZIPInputStream;
import org.rs2server.cache.map.LandscapeListener;
import org.rs2server.rs2.model.GameObject;
import org.rs2server.rs2.model.Location;

public class RegionClipping {

    private static final Logger logger = Logger.getLogger(RegionClipping.class.getName());
    private static RegionClipping singleton = new RegionClipping();
    private RegionClipping[] regions;
    private int id;
    private int[][][] clips = new int[4][][];
    private boolean members = false;

    public static RegionClipping getSingleton() {
        if (singleton == null) {
            singleton = new RegionClipping();
        }
        return singleton;
    }

    public RegionClipping() {
    }

    private void addFixes() {
        removeSquare(Location.create(2753, 3503, 2), 9);
        for (int y = 3503; y <= 3512; y++) {
            remove(2763, y, 2);
        }

        removeSquare(Location.create(3095, 3523, 0), 9);
        for (int x = 3041; x < 3329; x++) {
            addClippingForSolidObject(x, 3521, 0, 1, 2, true);
        }
        addClippingForSolidObject(3104, 3498, 0, 5, 5, true);
        addClippingForSolidObject(3093, 3525, 0, 2, 2, true);
        addClippingForSolidObject(3049, 3525, 0, 3, 3, true);
        addClippingForSolidObject(3104, 3494, 0, 2, 2, true);
        addClippingForSolidObject(3105, 3489, 0, 2, 2, true);
        for (int x = 3061; x <= 3066; x++) {
            remove(x, 3520, 0);
        }
        for (int x = 3095; x < 3066; x++) {
            remove(x, 3520, 0);
        }

        addClippingForSolidObject(2865, 5353, 2, 2, 2, true);

        remove(3103, 3493, 0);
        remove(3103, 3494, 0);
        remove(3104, 3493, 0);
        removeSquare(Location.create(3109, 3495, 0), 2);

        remove(3109, 3500, 0);
        remove(3109, 3501, 0);
        removeSquare(Location.create(3055, 3523, 0), 11);
        removeSquare(Location.create(3072, 3515, 0), 4);
        remove(3056, 3523, 0);
        remove(3098, 3523, 0);
        remove(3099, 3523, 0);
        removeSquare(Location.create(3095, 3523, 0), 2);
        removeSquare(Location.create(3045, 3523, 0), 2);
        removeSquare(Location.create(3090, 3503, 0), 2);
        remove(3099, 3497, 0);
        remove(3099, 3498, 0);
        remove(3098, 3497, 0);
        remove(3098, 3498, 0);
        addClippingForSolidObject(3095, 3488, 0, 4, 8, true);
        addClippingForSolidObject(3096, 3501, 0, 2, 2, true);

        // lumby door

        remove(3215, 3212, 0);
        remove(3215, 3211, 0);

        // al k

        remove(3318, 3193, 0);
        remove(3319, 3193, 0);
        remove(3320, 3193, 0);
        remove(3321, 3193, 0);

        remove(3272, 3166, 0);
        remove(3273, 3166, 0);
        remove(3273, 3167, 0);
        remove(3272, 3167, 0);

        remove(3276, 3180, 0);
        remove(3275, 3180, 0);
        remove(3280, 3185, 0);
        remove(3279, 3185, 0);
        remove(3278, 3191, 0);
        remove(3277, 3191, 0);
        remove(3317, 3193, 0);
        remove(3318, 3193, 0);


    }

    public void removeSquare(Location loc, int size) {
        for (int i = 0; i < size; i++) {
            for (int i2 = 0; i2 < size; i2++) {
                remove(loc.getX() + i, loc.getY() + i2, loc.getZ());
            }
        }
    }

    private void removeClip(Location loc) {
        try {
            int regionAbsX = (this.id >> 8) * 64;
            int regionAbsY = (this.id & 0xFF) * 64;
            if (this.clips[loc.getZ()] == null) {
                this.clips[loc.getZ()] = new int[64][64];
            }
            if (loc.getX() < regionAbsX || loc.getY() < regionAbsY) {
                return;
            }
            this.clips[loc.getZ()][(loc.getX() - regionAbsX)][(loc.getY()
                    - regionAbsY)] = 0;
        } catch (Exception localException) {
            // localException.printStackTrace();
        }
    }

    public void remove(int x, int y, int height) {
        removeClip(Location.create(x, y, height));

        int regionX = x >> 3;
        int regionY = y >> 3;
        int regionId = (regionX
                / 8 << 8) + regionY / 8;
        for (RegionClipping r : this.regions) {
            if (r.id() == regionId) {
                r.removeClip(Location.create(x, y, height));
                break;
            }
        }
    }

    private void addClip(int x, int y, int height, int shift) {
        int regionAbsX = (this.id >> 8) * 64;
        int regionAbsY = (this.id & 0xFF) * 64;
        if (this.clips[height] == null) {
            this.clips[height] = new int[64][64];
        }
        if (x < regionAbsX || y < regionAbsY) {
            return;
        }
        this.clips[height][(x - regionAbsX)][(y - regionAbsY)] |= shift;
    }

    private int getClip(int x, int y, int height) {
        int regionAbsX = (this.id >> 8) * 64;
        int regionAbsY = (this.id & 0xFF) * 64;
        if (this.clips[height] == null) {
            return 0;
        }
        if (regionAbsX > x || regionAbsY > y) {
            return 0;
        }
        if ((x - regionAbsX) > clips[height].length || (y - regionAbsY)
                > clips[height][(x - regionAbsX)].length) {
            return 0;
        }
        return this.clips[height][(x - regionAbsX)][(y - regionAbsY)];

    }

    public void addClipping(int x, int y, int height, int shift) {
        int regionX = x >> 3;
        int regionY = y >> 3;
        int regionId = (regionX
                / 8 << 8) + regionY / 8;
        for (RegionClipping r : this.regions) {
            if (r.id() == regionId) {
                r.addClip(x, y, height, shift);
                break;
            }
        }
    }

    public void addClippingForSolidObject(int x, int y, int height, int xLength, int yLength, boolean flag) {
        int clipping = 256;
        if (flag) {
            clipping += 131072;
        }
        for (int i = x; i < x + xLength; i++) {
            for (int i2 = y; i2 < y + yLength; i2++) {
                addClipping(i, i2, height, clipping);
            }
        }
    }

    public RegionClipping(int id, boolean members) {
        this.id = id;
        this.members = members;
    }

    public int id() {
        return this.id;
    }

    public boolean members() {
        return this.members;
    }

    public boolean isMembersArea(int x, int y, int height) {
        if ((x >= 3272) && (x <= 3320) && (y >= 2752) && (y <= 2809)) {
            return false;
        }
        if ((x >= 2640) && (x <= 2677) && (y >= 2638) && (y <= 2679)) {
            return false;
        }
        int regionX = x >> 3;
        int regionY = y >> 3;
        int regionId = (regionX / 8 << 8) + regionY / 8;

        for (RegionClipping r : this.regions) {
            if (r.id() == regionId) {
                return r.members();
            }
        }

        return false;
    }

    public void addClippingForVariableObject(int x, int y, int height, int type, int direction, boolean flag) {
        if (type == 0) {
            if (direction == 0) {
                addClipping(x, y, height, 128);
                addClipping(x - 1, y, height, 8);
            } else if (direction == 1) {
                addClipping(x, y, height, 2);
                addClipping(x, y + 1, height, 32);
            } else if (direction == 2) {
                addClipping(x, y, height, 8);
                addClipping(x + 1, y, height, 128);
            } else if (direction == 3) {
                addClipping(x, y, height, 32);
                addClipping(x, y - 1, height, 2);
            }
        } else if ((type == 1) || (type == 3)) {
            if (direction == 0) {
                addClipping(x, y, height, 1);
                addClipping(x - 1, y, height, 16);
            } else if (direction == 1) {
                addClipping(x, y, height, 4);
                addClipping(x + 1, y + 1, height, 64);
            } else if (direction == 2) {
                addClipping(x, y, height, 16);
                addClipping(x + 1, y - 1, height, 1);
            } else if (direction == 3) {
                addClipping(x, y, height, 64);
                addClipping(x - 1, y - 1, height, 4);
            }
        } else if (type == 2) {
            if (direction == 0) {
                addClipping(x, y, height, 130);
                addClipping(x - 1, y, height, 8);
                addClipping(x, y + 1, height, 32);
            } else if (direction == 1) {
                addClipping(x, y, height, 10);
                addClipping(x, y + 1, height, 32);
                addClipping(x + 1, y, height, 128);
            } else if (direction == 2) {
                addClipping(x, y, height, 40);
                addClipping(x + 1, y, height, 128);
                addClipping(x, y - 1, height, 2);
            } else if (direction == 3) {
                addClipping(x, y, height, 160);
                addClipping(x, y - 1, height, 2);
                addClipping(x - 1, y, height, 8);
            }
        }
        if (flag) {
            if (type == 0) {
                if (direction == 0) {
                    addClipping(x, y, height, 65536);
                    addClipping(x - 1, y, height, 4096);
                } else if (direction == 1) {
                    addClipping(x, y, height, 1024);
                    addClipping(x, y + 1, height, 16384);
                } else if (direction == 2) {
                    addClipping(x, y, height, 4096);
                    addClipping(x + 1, y, height, 65536);
                } else if (direction == 3) {
                    addClipping(x, y, height, 16384);
                    addClipping(x, y - 1, height, 1024);
                }
            }
            if ((type == 1) || (type == 3)) {
                if (direction == 0) {
                    addClipping(x, y, height, 512);
                    addClipping(x - 1, y + 1, height, 8192);
                } else if (direction == 1) {
                    addClipping(x, y, height, 2048);
                    addClipping(x + 1, y + 1, height, 32768);
                } else if (direction == 2) {
                    addClipping(x, y, height, 8192);
                    addClipping(x + 1, y + 1, height, 512);
                } else if (direction == 3) {
                    addClipping(x, y, height, 32768);
                    addClipping(x - 1, y - 1, height, 2048);
                }
            } else if (type == 2) {
                if (direction == 0) {
                    addClipping(x, y, height, 66560);
                    addClipping(x - 1, y, height, 4096);
                    addClipping(x, y + 1, height, 16384);
                } else if (direction == 1) {
                    addClipping(x, y, height, 5120);
                    addClipping(x, y + 1, height, 16384);
                    addClipping(x + 1, y, height, 65536);
                } else if (direction == 2) {
                    addClipping(x, y, height, 20480);
                    addClipping(x + 1, y, height, 65536);
                    addClipping(x, y - 1, height, 1024);
                } else if (direction == 3) {
                    addClipping(x, y, height, 81920);
                    addClipping(x, y - 1, height, 1024);
                    addClipping(x - 1, y, height, 4096);
                }
            }
        }
    }

    public void addObject(int objectId, int x, int y, int height, int type, int direction) {
        ObjectDef def = ObjectDef.getObjectDef(objectId);
        if (def == null) {
            return;
        }
        int xLength;
        int yLength;
        if (direction != 1 && direction != 3) {
            xLength = def.xLength();
            yLength = def.yLength();
        } else {
            xLength = def.yLength();
            yLength = def.xLength();
        }
        if (type == 22) {
            if ((def.hasActions()) && (def.unwalkable())) {
                addClipping(x, y, height, 2097152);
            }
        } else if (type >= 9) {
            if (def.unwalkable()) {
                addClippingForSolidObject(x, y, height, xLength, yLength, def.solid());
            }
        } else if ((type >= 0) && (type <= 3) && (def.unwalkable())) {
            addClippingForVariableObject(x, y, height, type, direction, def.solid());
        }
    }

    public int getClipping(int x, int y, int height) {
        if (height > 3) {
            height = 0;
        }

        int regionX = x >> 3;
        int regionY = y >> 3;
        int regionId = (regionX
                / 8 << 8) + regionY / 8;
        for (RegionClipping r : this.regions) {
            if (r.id() == regionId) {
                return r.getClip(x, y, height);
            }
        }
        return getClip(x, y, height);
    }

    public int getClipping(int x, int y, int height, boolean check) {
        if (height > 3) {
            height = 0;
        }

        int regionX = x >> 3;
        int regionY = y >> 3;
        int regionId = (regionX
                / 8 << 8) + regionY / 8;
        for (RegionClipping r : this.regions) {
            if (r.id() == regionId) {
                return r.getClip(x, y, height);
            }
        }

        return 0;
    }

    public boolean blockedNorth(Location loc) {
        return (getClipping(loc.getX(), loc.getY() + 1, loc.getZ()) & 0x1280120) != 0;
    }

    public boolean blockedEast(Location loc) {
        return (getClipping(loc.getX() + 1, loc.getY(), loc.getZ()) & 0x1280180) != 0;
    }

    public boolean blockedSouth(Location loc) {
        return (getClipping(loc.getX(), loc.getY() - 1, loc.getZ()) & 0x1280102) != 0;
    }

    public boolean blockedWest(Location loc) {
        return (getClipping(loc.getX() - 1, loc.getY(), loc.getZ()) & 0x1280108) != 0;
    }

    public boolean blockedNorthEast(Location loc) {
        return (getClipping(loc.getX() + 1, loc.getY() + 1, loc.getZ()) & 0x12801E0) != 0;
    }

    public boolean blockedNorthWest(Location loc) {
        return (getClipping(loc.getX() - 1, loc.getY() + 1, loc.getZ()) & 0x1280138) != 0;
    }

    public boolean blockedSouthEast(Location loc) {
        return (getClipping(loc.getX() + 1, loc.getY() - 1, loc.getZ()) & 0x1280183) != 0;
    }

    public boolean blockedSouthWest(Location loc) {
        return (getClipping(loc.getX() - 1, loc.getY() - 1, loc.getZ()) & 0x128010E) != 0;
    }

    public boolean canMove(int startX, int startY, int endX, int endY, int height, int xLength, int yLength) {
        int diffX = endX - startX;
        int diffY = endY - startY;
        int max = Math.max(Math.abs(diffX), Math.abs(diffY));
        for (int ii = 0; ii < max; ii++) {
            int currentX = endX - diffX;
            int currentY = endY - diffY;
            for (int i = 0; i < xLength; i++) {
                for (int i2 = 0; i2 < yLength; i2++) {
                    if (diffX < 0 && diffY < 0) {
                        if ((getClipping((currentX + i) - 1, (currentY + i2) - 1, height) & 0x128010e) != 0 || (getClipping((currentX + i) - 1, currentY + i2, height) & 0x1280108) != 0 || (getClipping(currentX + i, (currentY + i2) - 1, height) & 0x1280102) != 0) {
                            return false;
                        }
                    } else if (diffX > 0 && diffY > 0) {
                        if ((getClipping(currentX + i + 1, currentY + i2 + 1, height) & 0x12801e0) != 0 || (getClipping(currentX + i + 1, currentY + i2, height) & 0x1280180) != 0 || (getClipping(currentX + i, currentY + i2 + 1, height) & 0x1280120) != 0) {
                            return false;
                        }
                    } else if (diffX < 0 && diffY > 0) {
                        if ((getClipping((currentX + i) - 1, currentY + i2 + 1, height) & 0x1280138) != 0 || (getClipping((currentX + i) - 1, currentY + i2, height) & 0x1280108) != 0 || (getClipping(currentX + i, currentY + i2 + 1, height) & 0x1280120) != 0) {
                            return false;
                        }
                    } else if (diffX > 0 && diffY < 0) {
                        if ((getClipping(currentX + i + 1, (currentY + i2) - 1, height) & 0x1280183) != 0 || (getClipping(currentX + i + 1, currentY + i2, height) & 0x1280180) != 0 || (getClipping(currentX + i, (currentY + i2) - 1, height) & 0x1280102) != 0) {
                            return false;
                        }
                    } else if (diffX > 0 && diffY == 0) {
                        if ((getClipping(currentX + i + 1, currentY + i2, height) & 0x1280180) != 0) {
                            return false;
                        }
                    } else if (diffX < 0 && diffY == 0) {
                        if ((getClipping((currentX + i) - 1, currentY + i2, height) & 0x1280108) != 0) {
                            return false;
                        }
                    } else if (diffX == 0 && diffY > 0) {
                        if ((getClipping(currentX + i, currentY + i2 + 1, height) & 0x1280120) != 0) {
                            return false;
                        }
                    } else if (diffX == 0 && diffY < 0 && (getClipping(currentX + i, (currentY + i2) - 1, height) & 0x1280102) != 0) {
                        return false;
                    }
                }

            }

            if (diffX < 0) {
                diffX++;
            } else if (diffX > 0) {
                diffX--;
            }
            if (diffY < 0) {
                diffY++;
            } else if (diffY > 0) {
                diffY--;
            }
        }

        return true;
    }

    public boolean getClipping(int x, int y, int height, int moveTypeX, int moveTypeY) {
        try {
            if (height > 3) {
                height = 0;
            }
            int checkX = x + moveTypeX;
            int checkY = y + moveTypeY;
            if ((moveTypeX == -1) && (moveTypeY == 0)) {
                return (getClipping(x, y, height) & 0x1280108) == 0;
            }
            if ((moveTypeX == 1) && (moveTypeY == 0)) {
                return (getClipping(x, y, height) & 0x1280180) == 0;
            }
            if ((moveTypeX == 0) && (moveTypeY == -1)) {
                return (getClipping(x, y, height) & 0x1280102) == 0;
            }
            if ((moveTypeX == 0) && (moveTypeY == 1)) {
                return (getClipping(x, y, height) & 0x1280120) == 0;
            }
            if ((moveTypeX == -1) && (moveTypeY == -1)) {
                return ((getClipping(x, y, height) & 0x128010E) == 0) && ((getClipping(checkX - 1, checkY, height) & 0x1280108) == 0) && ((getClipping(checkX, checkY - 1, height) & 0x1280102) == 0);
            }
            if ((moveTypeX == 1) && (moveTypeY == -1)) {
                return ((getClipping(x, y, height) & 0x1280183) == 0) && ((getClipping(checkX + 1, checkY, height) & 0x1280180) == 0) && ((getClipping(checkX, checkY - 1, height) & 0x1280102) == 0);
            }
            if ((moveTypeX == -1) && (moveTypeY == 1)) {
                return ((getClipping(x, y, height) & 0x1280138) == 0) && ((getClipping(checkX - 1, checkY, height) & 0x1280108) == 0) && ((getClipping(checkX, checkY + 1, height) & 0x1280120) == 0);
            }
            if ((moveTypeX == 1) && (moveTypeY == 1)) {
                return ((getClipping(x, y, height) & 0x12801E0) == 0) && ((getClipping(checkX + 1, checkY, height) & 0x1280180) == 0) && ((getClipping(checkX, checkY + 1, height) & 0x1280120) == 0);
            }
            return false;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return true;
    }
    public List<Integer> mapIndices = null;
    public Map<Integer, byte[]> mapBuffer = new HashMap<Integer, byte[]>();

    public byte[] grabMap(int id) throws IOException {
        if (mapIndices == null) {
            loadIndex2();
        }
        if (mapBuffer.get(id) == null) {
            RandomAccessFile raf_cache = new RandomAccessFile("data/world/MAP_CACHE.dat", "rw");
            RandomAccessFile raf_index = new RandomAccessFile("data/world/MAP_CACHE.idx", "rw");
            int pos = getIndexPosition(id);
            if (pos == -1) {
                return null;
            }
            raf_index.seek(pos * 12);
            raf_cache.seek(raf_index.readInt());
            byte[] b = new byte[raf_index.readInt()];
            raf_cache.readFully(b);
            b = inflate(b, raf_index.readInt());
            mapBuffer.put(id, b);
            return mapBuffer.get(id);
        }
        return mapBuffer.get(id);
    }

    public void loadIndex2() throws IOException {
        mapIndices = new ArrayList<Integer>();
        DataInputStream dis = new DataInputStream(new FileInputStream("data/world/MAP_CACHE.idx2"));
        for (int i = 0; i < (int) new File("data/world/MAP_CACHE.idx2").length() / 2; i++) {
            mapIndices.add((int) dis.readShort());
        }
    }

    public int getIndexPosition(int id) throws IOException {
        if (mapIndices.contains(id)) {
            for (int i = 0; i < mapIndices.size(); i++) {
                if (mapIndices.get(i) == id) {
                    return i;
                }
            }
        }
        return -1;
    }

    public byte[] inflate(byte[] b, int l) throws IOException {
        byte[] buf = new byte[l];
        ByteArrayInputStream bais = new ByteArrayInputStream(b);
        DataInputStream dis = new DataInputStream(new GZIPInputStream(bais));
        dis.readFully(buf, 0, buf.length);
        dis.close();
        return buf;
    }

    public void load(LandscapeListener listener) {
        try {

            logger.info("Loading clipping laws.");

            File f = new File("data/world/map_index");
            if (!f.exists()) {
                logger.info(f.getName() + " file does not exist.");
                return;
            }
            RandomAccessFile in = new RandomAccessFile(f, "rw");

            //  this.loadIndex2();
            int size = (int) in.length() / 7;
            this.regions = new RegionClipping[size];
            int[] regionIds = new int[size];
            int[] mapGroundFileIds = new int[size];
            int[] mapObjectsFileIds = new int[size];
            boolean[] isMembers = new boolean[size];
            for (int i = 0; i < size; i++) {
                regionIds[i] = in.readShort();
                mapGroundFileIds[i] = in.readShort();
                mapObjectsFileIds[i] = in.readShort();
                isMembers[i] = in.readByte() == 0;
            }

            for (int i = 0; i < size; i++) {
                //  System.out.println(mapIndices.get(i));
                this.regions[i] = new RegionClipping(regionIds[i], isMembers[i]);
            }
            boolean errorLoading = false;
            int regionz = 0;
            for (int i = 0; i < size; i++) {
                File file = new File("data/world/map/" + mapObjectsFileIds[i] + ".gz");
                byte[] file1 = file.exists() ? getBuffer(new File("data/world/map/"
                        + mapObjectsFileIds[i] + ".gz")) : this.grabMap(mapObjectsFileIds[i]);
                //getBuffer(new File("data/world/map/" + mapObjectsFileIds[i] + ".gz"));
                file = new File("data/world/map/" + mapGroundFileIds[i] + ".gz");

                byte[] file2 = file.exists() ? getBuffer(new File("data/world/map/"
                        + mapGroundFileIds[i] + ".gz")) : this.grabMap(mapGroundFileIds[i]);
                //getBuffer(new File("data/world/map/" + mapGroundFileIds[i] + ".gz"));
                if ((file1 == null) || (file2 == null)) {
                    continue;
                }
                try {
                    singleton.loadMaps(regionIds[i], new ByteStream(file1), new ByteStream(file2), listener);
                    regionz++;
                } catch (Exception e) {
                    e.printStackTrace();
                    errorLoading = true;
                }
            }
            GameObject go = new GameObject(Location.create(2658,
                    2639, 0), 14315, 0, 1, true);
            listener.objectParsed(go);
            if (errorLoading) {
                logger.info("An error had occuried while trying to load world maps.");
                return;
            }
            singleton.addFixes();
            logger.info("Loaded " + regionz + " Regions.");
        } catch (Exception e) {
            e.printStackTrace();
        }
        /*
         * try { logger.info("Loading clipping laws."); regions = new
         * RegionClipping[MapParser.getTileRegionData().size()]; int i = 0; for
         * (TileRegionData data : MapParser.getTileRegionData()) { regions[i] =
         * new RegionClipping(data.getModifier(), false); i++; } Map<Integer,
         * int[][][]> map = new HashMap<Integer, int[][][]>(); for (File file :
         * new File("./data/cache/tiles/").listFiles()) { int area =
         * Integer.parseInt(file.getName().substring(0,
         * file.getName().indexOf(".dat"))); if (file == null) { continue; } try
         * { if (MapParser.getDataForArea(area) != null) { byte[] data =
         * ReadFile(file.getAbsolutePath());
         * map.put(MapParser.getDataForArea(area).getModifier(),
         * loadMaps(MapParser.getDataForArea(area).getModifier(), new
         * ByteStream(data))); } } catch (Exception e) { e.printStackTrace(); }
         * } loadObjects(listener, map); logger.info("Loaded " + regions + "
         * Regions."); } catch (Exception e) { e.printStackTrace(); }
         */
    }

    private final byte[] ReadFile(String s) {
        try {
            File file = new File(s);
            int i = (int) file.length();
            byte abyte0[] = new byte[i];
            DataInputStream datainputstream =
                    new DataInputStream(new BufferedInputStream(new FileInputStream(s)));
            datainputstream.readFully(abyte0, 0, i);
            datainputstream.close();
            return abyte0;
        } catch (Exception exception) {
        }
        return null;
    }

    private void loadObjects(LandscapeListener listener, Map<Integer, int[][][]> map) {
        try {
            RandomAccessFile raf = new RandomAccessFile("./data/cache/OBJECT_DUMP.dat", "r");
            while (raf.length() - raf.getFilePointer() > 1) {
                int objectId = raf.readInt();
                short x2 = raf.readShort();
                short y2 = raf.readShort();
                byte plane = raf.readByte();
                Location l = Location.create(x2, y2, plane);
                int regionId = ((l.getRegionX() / 8) << 8) + (l.getRegionY() / 8);
                byte type = raf.readByte();
                byte rotation = raf.readByte();
                GameObject go = new GameObject(Location.create(x2, y2, plane), objectId, type, rotation, true);
                int localX = go.getSpawnLocation().getLocalX();
                int localY = go.getSpawnLocation().getLocalY();
                if (localX < 0 || localX >= 64 || localY < 0 || localY >= 64) {
                    continue;
                }
                if (map.get(regionId) != null) {
                    if ((map.get(regionId)[1][localX][localY] & 2) == 2) {
                        plane--;
                    }
                }
                if (plane >= 0 && plane <= 3) {
                    addObject(objectId, x2, y2, plane, type, rotation);
                }
                listener.objectParsed(go);
            }
        } catch (IOException ex) {
            Logger.getLogger(RegionClipping.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private int[][][] loadMaps(int regionId, ByteStream str2) {
        int absX = (regionId >> 8) * 64;
        int absY = (regionId & 255) * 64;
        int[][][] someArray = new int[4][64][64];

        int objectId;
        int incr;
        int location;
        int incr2;
        for (objectId = 0; objectId < 4; ++objectId) {
            for (incr = 0; incr < 64; ++incr) {
                location = 0;

                while (location < 64) {
                    while (true) {
                        incr2 = str2.getUByte();
                        if (incr2 != 0) {
                            if (incr2 != 1) {
                                if (incr2 <= 49) {
                                    str2.skip(1);
                                } else if (incr2 <= 81) {
                                    someArray[objectId][incr][location] = (byte) (incr2 - 49);
                                }
                                continue;
                            }

                            str2.skip(1);
                        }

                        ++location;
                        break;
                    }
                }
            }
        }
        return someArray;
    }

    private void loadMaps(int regionId, ByteStream str1, ByteStream str2, LandscapeListener listener) {
        int absX = (regionId >> 8) * 64;
        int absY = (regionId & 255) * 64;
        byte[][][] someArray = new byte[4][64][64];

        int objectId;
        int incr;
        int location;
        int incr2;
        for (objectId = 0; objectId < 4; ++objectId) {
            for (incr = 0; incr < 64; ++incr) {
                location = 0;

                while (location < 64) {
                    while (true) {
                        incr2 = str2.getUByte();
                        if (incr2 != 0) {
                            if (incr2 != 1) {
                                if (incr2 <= 49) {
                                    str2.skip(1);
                                } else if (incr2 <= 81) {
                                    someArray[objectId][incr][location] = (byte) (incr2 - 49);
                                }
                                continue;
                            }

                            str2.skip(1);
                        }

                        ++location;
                        break;
                    }
                }
            }
        }

        for (objectId = 0; objectId < 4; ++objectId) {
            for (incr = 0; incr < 64; ++incr) {
                for (location = 0; location < 64; ++location) {
                    if ((someArray[objectId][incr][location] & 1) == 1) {
                        incr2 = objectId;
                        if ((someArray[1][incr][location] & 2) == 2) {
                            incr2 = objectId - 1;
                        }

                        if (incr2 >= 0 && incr2 <= 3) {
                            addClipping(absX + incr, absY + location, incr2, 2097152);
                        }
                    }
                }
            }
        }

        objectId = -1;

        while ((incr = str1.getUSmart()) != 0) {
            objectId += incr;
            location = 0;

            while ((incr2 = str1.getUSmart()) != 0) {
                location += incr2 - 1;
                int localX = location >> 6 & 63;
                int localY = location & 63;
                int height = location >> 12;
                int objectData = str1.getUByte();
                int type = objectData >> 2;
                int direction = objectData & 3;
                GameObject go = new GameObject(Location.create(absX + localX,
                        absY + localY, height), objectId, type, direction, true);
                if (localX >= 0 && localX < 64 && localY >= 0 && localY < 64) {
                    if ((someArray[1][localX][localY] & 2) == 2) {
                        --height;
                    }

                    if (height >= 0 && height <= 3) {
                        addObject(objectId, absX + localX, absY + localY, height, type, direction);
                        listener.objectParsed(go);
                    }
                }
            }
        }
    }

    public static byte[] getBuffer(File f) throws Exception {
        if (!f.exists()) {
            return null;
        }
        byte[] buffer = new byte[(int) f.length()];
        DataInputStream dis = new DataInputStream(new FileInputStream(f));
        dis.readFully(buffer);
        dis.close();
        byte[] gzipInputBuffer = new byte[999999];
        int bufferlength = 0;
        GZIPInputStream gzip = new GZIPInputStream(new ByteArrayInputStream(buffer));

        while (bufferlength != gzipInputBuffer.length) {
            int readByte = gzip.read(gzipInputBuffer, bufferlength, gzipInputBuffer.length - bufferlength);
            if (readByte == -1) {
                break;
            }
            bufferlength += readByte;
        }
        byte[] inflated = new byte[bufferlength];
        System.arraycopy(gzipInputBuffer, 0, inflated, 0, bufferlength);
        buffer = inflated;
        if (buffer.length < 10) {
            return null;
        }
        return buffer;
    }
}
